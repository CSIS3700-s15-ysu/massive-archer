//suggestion from Dr S
void begin_explosion (float x, float y) {
//create proper explosion type
//update world state

//first, find out where the shell hit


//did shell hit tank? (impact_location = tank_location)
	if (x == tank_x && y == tank_y) {
		//yes = display hit sprite at impact_location
		hit = true;
	}
	else {
		//no = display miss sprite at impact_location
		hit = false;
	}

}

//suggestion from Dr S
void end_explosion (explosion_sprite *) {
//remove explosion sprite
//update world state from IMPACT to AIMING or GAME_OVER
}

//Annie's pseudocode

/**
Math for the shell
**/
//good to go
void initial_shell_velocity (float velocity_from_user, float angle_from_user) {
	//rad_angle_from_user = angle_from_user * (pi/180)

	vy = velocity_from_user * sin(rad_angle_from_user);
	vx = velocity_from_user * cos(rad_angle_from_user);

	}
	
/* use the other one since vx won't be updated
void shell_velocity (float incoming_v_x, float incoming_v_y, float dt) {
	//initial shell velocity has already been computed
	//should also be able to call this whenever time updates
	
	float velocity_x, velocity_y;
	float accel_y = 300;
	//float accel_x = 0;
	
	//velocity of x won't change so not going to bother updating it	
	//velocity_x = velocity_x_at_t + (accel_x * dt)
	//vx = incoming_v_x;
	
	vy = incoming_v_y + (accel_y * dt);
}
*/

float shell_y_velocity (float incoming_v_y, float dt) {
	//initial shell velocity has already been computed
	//should also be able to call this whenever time updates
	
	float velocity_y;
	float accel_y = 300;
	
	vy = incoming_v_y + (accel_y * dt);
	
	return velocity_y;
}


	
float shell_x_location (float incoming_x_position, float vx,  float dt) {
	
	x = incoming_x_position + (vx * dt);
	return x;

}	

float shell_y_location (float incoming_y_position, float vy, float dt) {
	
	y = incoming_y_position + (vy * dt);
	return y;
	
}

so, to get shell location:
x = complete_shell_x_location(velocity, angle, x, dt);
OR

x = shell_x_location(vx, x, dt);

y = shell_y_location(vy, y, dt);


//this will work for x location
float complete_shell_x_location (float velocity_from_user, float angle_from_user, float incoming_x_position, float dt) {
	
	float x_position;
	float vx;
	
	vx = velocity_from_user * cos(angle_from_user);
	
	//vx doesn't change with time
	
	x_position = incoming_x_position + (vx * dt);
	
	return x_position;
}
